models.py
from django.db import models
from django.contrib.postgres.fields import JSONField  # если используете PostgreSQL

class Znanie(models.Model):
    
    title = models.CharField(max_length=255)
    type = models.ForeignKey('ZnanieType', on_delete=models.CASCADE)
    # several_jobs = models.BooleanField(default=False)  # УДАЛЯЕМ
    
    meta = models.JSONField(default=dict, blank=True)

   python manage.py makemigrations
   python manage.py migrate

class Znanie(models.Model):
    # ...

    def is_multiple_jobs(self):
        return self.meta.get('algoritm', {}).get('number_of_jobs', 0) == 1

    def is_adaptation_allowed(self):
        return self.meta.get('algoritm', {}).get('adaptation', 0) == 1

admin.py
from django.contrib import admin
from .models import Znanie

@admin.register(Znanie)
class ZnanieAdmin(admin.ModelAdmin):
    list_display = ('title', 'type')
    # Убираем старое поле "несколько работ", не добавляем его
    # Можно добавить отображение мета, если нужно:
    readonly_fields = ('display_meta',)

    def display_meta(self, obj):
        import json
        return json.dumps(obj.meta, indent=2, ensure_ascii=False)

шаблон: templates/algoritm_detail.html (или где отображается знание)
{% if znanie.is_adaptation_allowed %}
    <a href="{% url 'adaptation_page' znanie.id %}" class="btn btn-primary">Адаптация под себя</a>
{% endif %}

forms.py
class ZnanieForm(forms.ModelForm):
    class Meta:
        model = Znanie
        fields = ['title', 'type', 'meta']

    def clean(self):
        cleaned_data = super().clean()
        meta = cleaned_data.get('meta', {})
        if 'algoritm' not in meta:
            meta['algoritm'] = {}
        if 'number_of_jobs' not in meta['algoritm']:
            meta['algoritm']['number_of_jobs'] = 0
        if 'adaptation' not in meta['algoritm']:
            meta['algoritm']['adaptation'] = 0
        cleaned_data['meta'] = meta
        return cleaned_data

json
{
  "algoritm": {
    "number_of_jobs": 1,
    "adaptation": 1
  }
}